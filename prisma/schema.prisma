// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AnalyticsEvent {
  id        Int      @id @default(autoincrement())
  type      String
  event     String
  timestamp DateTime @default(now())
  guildId   String?
  guild     Guild?   @relation(fields: [guildId], references: [id])
  channelId String?
  memberId  String?
  member    Member?  @relation(fields: [memberId], references: [id])
}

model FeedbackItem {
  id          Int      @id @default(autoincrement())
  submitterId String?
  submitter   Member?  @relation(fields: [submitterId], references: [id])
  comment     String?
  guildId     String?
  guild       Guild?   @relation(fields: [guildId], references: [id])
  channelId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Guild {
  id               String           @id
  name             String?
  description      String?
  joinedAt         DateTime?
  discordCreatedAt DateTime?
  memberCount      Int              @default(0)
  cornScore        Int              @default(0)
  goodBotCount     Int              @default(0)
  badBotCount      Int              @default(0)
  icon             String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  events           AnalyticsEvent[]
  members          Member[]
  reports          UserReport[]
  feedback         FeedbackItem[]
}

model Member {
  id              String           @id
  name            String?
  avatar          String?
  displayHexColor String?
  displayName     String?
  nickname        String?
  pending         Boolean?         @default(false)
  premiumSince    DateTime?
  guildId         String?
  guild           Guild?           @relation(fields: [guildId], references: [id])
  pronouns        String?
  birthdayMonth   Int?
  birthdayDay     Int?
  joinedAt        DateTime?
  corns           Int?             @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  events          AnalyticsEvent[]
  feedback        FeedbackItem[]
}

model UserReport {
  id             Int      @id @default(autoincrement())
  reportedUserId String?
  reason         String?
  reportedById   String?
  guildId        String?
  guild          Guild?   @relation(fields: [guildId], references: [id])
  channelId      String?
  userSubmitted  Boolean?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
